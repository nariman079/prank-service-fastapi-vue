services:
  mongo:
    image: mongo
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    env_file:
      - .env

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    env_file:
      - .env
    depends_on:
      - mongo

  cache:
    image: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    env_file:
      - .env
    command: >
      sh -c '
          mkdir -p /usr/local/etc/redis &&
          echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
          echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
          echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
          echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
          echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
          echo "user $REDIS_USER on +@all &* ~* >$REDIS_USER_PASSWORD " >> /usr/local/etc/redis/users.acl &&
          redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
        '
    network_mode: 'host'

  backend:
    build: .
    command: poetry run uvicorn backend.main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./:/app
      - uploads:/app/uploads
    restart: unless-stopped
    env_file:
      - .env  
    depends_on:
      - cache
      - mongo
    network_mode: 'host'

  celery:
    build: .
    command: poetry run celery -A backend.worker worker -l info
    restart: unless-stopped
    volumes:
      - ./:/app
      - uploads:/app/uploads
    env_file:
      - .env
    depends_on:
      - backend
      - mongo
    network_mode: 'host'

  celery_worker_1:
    build: .
    command: poetry run celery -A backend.worker worker -l info
    restart: unless-stopped
    volumes:
      - ./:/app
      - uploads:/app/uploads
    env_file:
      - .env
    depends_on:
      - backend
      - mongo
    network_mode: 'host'

  load_balancer:
    image: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx_prod.conf:/etc/nginx/nginx.conf
      - ./nginx/tiktok_prod.conf:/etc/nginx/conf.d/tiktok.conf
      - ./nginx/moan_prod.conf:/etc/nginx/conf.d/moan.conf
      - ./frontend/dist:/app/tiktok
      - ./ston_frontend/dist:/app/moan
      - /etc/letsencrypt:/etc/letsencrypt/
    depends_on:
      - backend
    network_mode: 'host'

networks:
  net:
    driver: bridge

volumes:
  uploads:
    driver: local
  mongo_data:
    driver: local

