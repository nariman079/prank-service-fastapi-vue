services:
  mongo:
    image: mongo
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${ MONGODB_ROOT_USERNAME }
      MONGO_INITDB_ROOT_PASSWORD: ${ MONGODB_ROOT_PASSWORD }

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_ADMIN_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_ADMIN_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo

  cache:
    image: 'redis:alpine'
    command: redis-server
    restart: unless-stopped
    network_mode: 'host'

  backend:
    build: .
    command: poetry run uvicorn backend.main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./:/app
      - uploads:/app/uploads
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis://localhost:6379
    depends_on:
      - cache
      - mongo
    network_mode: 'host'

  celery:
    build: .
    command: poetry run celery -A backend.worker worker -l info
    restart: unless-stopped
    volumes:
      - ./:/app
      - uploads:/app/uploads
    environment:
      - REDIS_HOST=redis://localhost:6379
    depends_on:
      - backend
      - mongo
    network_mode: 'host'

  celery_worker_1:
    build: .
    command: poetry run celery -A backend.worker worker -l info
    restart: unless-stopped
    volumes:
      - ./:/app
      - uploads:/app/uploads
    environment:
      - REDIS_HOST=redis://localhost:6379
    depends_on:
      - backend
      - mongo
    network_mode: 'host'


volumes:
  uploads:
    driver: local
  mongo_data:
    driver: local








































































































































































































































































































































































































  load_balancer:
    image: nginx
    ports:
      - "443:443"
      - "444:444"
    volumes:
      - ./nginx/nginx.local.conf:/etc/nginx/nginx.conf
      - ./nginx/tiktok.conf:/etc/nginx/conf.d/tiktok.conf
      - ./nginx/moan.conf:/etc/nginx/conf.d/moan.conf
      - ./frontend/dist:/app/tiktok
      - ./ston_frontend/dist:/app/moan
      - /etc/letsencrypt:/etc/letsencrypt/
    depends_on:
      - backend
    network_mode: 'host'

networks:
  net:
    driver: bridge
